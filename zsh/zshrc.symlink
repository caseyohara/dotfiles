# Masterrace
bindkey -v
# Shorten key delay for <ESC> key in zsh's vi mode
export KEYTIMEOUT=1

# Set Terminal
export TERM=xterm-256color
export EDITOR='/usr/local/bin/vim'

export ANSIBLE_VAULT_PASSWORD_FILE="keys/vault_pass"
export HOMEBREW_NO_AUTO_UPDATE=1

HISTFILE=~/.history
HISTSIZE=100000
SAVEHIST=100000

alias ag='ag --ignore-dir log'
alias ds='cd ~/Desktop'
alias ggpull='git pull origin $(git rev-parse --abbrev-ref HEAD)'
alias ggpush='git push origin $(git rev-parse --abbrev-ref HEAD)'
alias ll='ls -lh'
alias ls='ls -la'
alias m='mvim'
alias marked="open -a /Applications/Marked\ 2.app"
alias server="http-server"
alias vi='vim'

# Exports a function because ZSH can only export strings
function exportf (){
  export $(echo $1)="`whence -f $1 | sed -e "s/$1 //" `"
}

export STASH_DIR=$HOME/Stash
mkdir -p $STASH_DIR
function stash() {
  command="$1"
  file="$2"
  type=""
  ts=`date +%Y%m%dT%H%M%S`

  if [ -z "$command" ]; then
    echo "Usage:"
    echo "$ stash <file>     Alias for $ stash mv <file>"
    echo "$ stash mv <file>  Move <file> to $STASH_DIR"
    echo "$ stash cp <file>  Copy <file> to $STASH_DIR"
    echo "$ stash dir        Prints $STASH_DIR"
    echo "$ stash list       List files in $STASH_DIR"
    echo "$ stash open       Open $STASH_DIR"
    return 1
  fi

  if [ "$command" = "dir" ]; then
    echo $STASH_DIR
    return 0
  elif [ "$command" = "list" ]; then
    /bin/ls -A1 $STASH_DIR | sort
    return 0
  elif [ "$command" = "open" ]; then
    open $STASH_DIR
    return 0
  fi

  # If a second parameter was not passed, assume mv
  if [ -z "$file" ]; then
    file=$1
    command='mv'
  fi

  if [ -f "$file" ]; then
    type='file'
  elif [ -d "$file" ]; then
    type='directory'
  else
    echo "stash: File not found: $file" >&2
    return 1
  fi

  basefile=$file:t
  target="$STASH_DIR/$ts-$basefile"

  if [ "$command" = "mv" ]; then
    mv $file $target
    echo "stash: Moved $file to $target" >&2
    return 0
  elif [ "$command" = "cp" ]; then
    cp -r $file $target
    echo "stash: Copied $file to $target" >&2
    return 0
  else
    echo "stash: '$command' is not a stash command" >&2
    return 1
  fi
}
exportf stash

function repair_command_t() {
  cd ~/.vim/bundle/command-t/ruby/command-t/ext/command-t
  git checkout "5.0.5"
  /usr/local/opt/ruby/bin/ruby extconf.rb
  make
}
exportf repair_command_t

export PATH=\
./bin:\
$HOME/bin:\
$HOME/.rbenv/bin:\
/usr/local/share/npm/bin:\
/usr/local/bin:\
/usr/local/sbin:\
/usr/bin:\
/bin:\
/usr/sbin:\
/sbin:\
/usr/X11/bin\

# Postgres.app
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin

# Yarn
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# rbenv init
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# prx init
eval "$($HOME/.prx/bin/prx init -)"

# For Ruby servers
# https://blog.phusion.nl/2017/10/13/why-ruby-app-servers-break-on-macos-high-sierra-and-what-can-be-done-about-it/
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
