call pathogen#infect()
call pathogen#helptags()

let mapleader=","
syntax on
syntax enable
set vb
set nowrap
set number
set nocompatible
set hidden
set history=10000
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
set showmatch
set incsearch
set hlsearch
set ignorecase smartcase
set cursorline
set cmdheight=1
set cmdwinheight=25
set switchbuf=useopen
set numberwidth=5
set showtabline=2
set winwidth=100
set shell=zsh
set t_ti= t_te=
set scrolloff=3
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backspace=indent,eol,start
set showcmd
set go-=L
set guioptions-=T
set guioptions-=r
set wildmode=longest,list
set wildmenu

set wildignore+=*.gif,*.jpg,*.jpeg,*.svg
set wildignore+=*.xlsx,*.csv
set wildignore+=*/node_modules/*,**/node_modules
set wildignore+=*/app/assets/builds
set wildignore+=*.db,*.rdb
set wildignore+=*/log
set wildignore+=*/vendor
set wildignore+=.DS_Store,*/.DS_Store
set wildignore+=*/tmp,tmp,tmp/*,./tmp,./tmp/*

set clipboard=unnamed
set laststatus=2
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
set list
set listchars=tab:â–¸\ 

"A don't give the 'ATTENTION' message when an existing swap file is found.
set shortmess+=A

:set t_Co=256
:set background=dark
:color caseyohara

:command! W w

" Flush CommandT when opening
map <leader>t :CommandTFlush<cr>:CommandT<cr>

" CommandT uses Vim's pwd as root (ie. attempts no traversal up the tree to find a .git dir)
let g:CommandTTraverseSCM="pwd"

" Disable left/right/up/down keys
map <Left>  <Nop>
map <Right> <Nop>
map <Up>    <Nop>
map <Down>  <Nop>

" Map ctrl+j/k/h/l for split pane navigation
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" leader leader to switch
nnoremap <leader><leader> <c-^>
imap <c-l> <space>=><space>
imap <c-c> <esc>

" %% for directory of current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" <space> to exec macro
:nnoremap <Space> @q

" Make hlsearch more reasonable
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

filetype plugin indent on
autocmd FileType ruby,haml,eruby,yaml,html,javascript,coffeescript,css,markdown,sass,less,cucumber set ai sw=2 sts=2 et
au BufNewFile,BufRead,BufReadPost *.less set filetype=less
au BufNewFile,BufReadPost *.go setl ai expandtab nolist noet ci pi sts=0 sw=4 ts=4
au BufNewFile,BufRead *.go set filetype=go syntax=go
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.todo set filetype=todo
au BufNewFile,BufRead .env.* set filetype=config
au BufNewFile,BufRead Vagrantfile set filetype=ruby
au BufNewFile,BufRead *.nginx.conf set filetype=nginx
au BufNewFile,BufRead *.service set filetype=dosini
autocmd BufNewFile,BufRead *_spec.rb set syntax=rspec
autocmd BufNewFile,BufRead *.sql setf pgsql
let g:sql_type_default = 'pgsql'
augroup SmartyHTML
  autocmd!
  autocmd Filetype smarty set filetype=smarty.html
augroup END

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=darkred guibg=#ff0000
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" Remove trailing whitespace
function! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction
map <leader>w :call StripTrailingWhitespaces()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" ctrl-tab for line completion
inoremap <c-tab> <c-x><c-l>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


" adds to statusline
"set laststatus=2
"set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}

" a little more informative version of the above
nmap <Leader>si :call <SID>SynStack()<CR>

function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


